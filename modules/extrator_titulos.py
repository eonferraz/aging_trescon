import streamlit as st
import pandas as pd
import re

# Campos poss√≠veis para extra√ß√£o
CAMPOS_DISPONIVEIS = [
    "Fornecedor",
    "N√∫mero do T√≠tulo",
    "Data de Emiss√£o",
    "Data de Vencimento",
    "Valor do T√≠tulo"
]

# Regex sugerido por campo
REGEX_SUGERIDA = {
    "Fornecedor": r"(?i)CLIENTE[:\- ]+\s*(.+)",
    "N√∫mero do T√≠tulo": r"(?i)NF[:\- ]+(\d+)",
    "Data de Emiss√£o": r"(?i)EMISS(?:AO|√ÉO)?[:\- ]+(\d{2}/\d{2}/\d{4})",
    "Data de Vencimento": r"(?i)VENC(?:TO|IMENTO)?[:\- ]+(\d{2}/\d{2}/\d{4})",
    "Valor do T√≠tulo": r"(?i)VALOR[:\- R$]*([\d\.,]+)"
}


def aplicar_regex_em_coluna(df, coluna, regex):
    """
    Aplica a regex na coluna selecionada e retorna os dados extra√≠dos.
    """
    try:
        return df[coluna].astype(str).str.extract(regex, expand=False)
    except Exception as e:
        st.error(f"Erro ao aplicar regex: {e}")
        return None


def executar(df):
    """
    Interface assistida com decis√£o final do usu√°rio.
    Analisa todas as colunas de texto, mostra sugest√µes de extra√ß√£o e permite
    ao usu√°rio escolher a coluna final para aplicar.
    """
    st.markdown("<div class='custom-subheader'>üß† Extra√ß√£o Assistida de Campos</div>", unsafe_allow_html=True)

    if df.empty or df.shape[1] == 0:
        st.warning("Nenhum dado dispon√≠vel para an√°lise. Importe os t√≠tulos primeiro.")
        return

    campo = st.selectbox("Selecione o campo que deseja extrair:", CAMPOS_DISPONIVEIS)
    regex = REGEX_SUGERIDA.get(campo, "")
    colunas_texto = df.select_dtypes(include='object').columns.tolist()

    if not colunas_texto:
        st.warning("N√£o foram encontradas colunas com texto para an√°lise.")
        return

    st.markdown("### üîé An√°lise autom√°tica das colunas dispon√≠veis")
    colunas_com_sucesso = []

    for col in colunas_texto:
        extraido = aplicar_regex_em_coluna(df, col, regex)

        if extraido is not None and extraido.notna().sum() > 0:
            colunas_com_sucesso.append((col, extraido))
            st.markdown(f"**Coluna candidata:** `{col}` ‚Äî resultados encontrados:")
            preview = pd.DataFrame({
                "Texto Original": df[col].head(5),
                f"{campo} Extra√≠do": extraido.head(5)
            })
            st.dataframe(preview, use_container_width=True)

    if not colunas_com_sucesso:
        st.info("Nenhuma correspond√™ncia foi encontrada com a express√£o padr√£o. Tente revisar a regex.")
        return

    # Sele√ß√£o final da coluna pelo usu√°rio
    colunas_nomes = [col[0] for col in colunas_com_sucesso]
    coluna_escolhida = st.selectbox("‚úÖ Selecione qual coluna deseja usar para extrair o campo:", colunas_nomes)

    if coluna_escolhida:
        extraido_final = dict(colunas_com_sucesso)[coluna_escolhida]

        st.markdown("#### üìã Resultado Final da Extra√ß√£o")
        st.dataframe(pd.DataFrame({
            "Texto Original": df[coluna_escolhida].head(10),
            f"{campo} Extra√≠do": extraido_final.head(10)
        }), use_container_width=True)

        if st.button("‚úîÔ∏è Aplicar Extra√ß√£o"):
            df_resultado = df.copy()
            df_resultado[campo] = extraido_final

            # Armazenar resultado
            chave = f"campo_extraido_{campo.lower().replace(' ', '_')}"
            st.session_state[chave] = extraido_final
            st.session_state["df_titulos"] = df_resultado

            st.success(f"Campo '{campo}' extra√≠do com sucesso da coluna '{coluna_escolhida}'!")
